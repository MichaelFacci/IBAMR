
IIMethod: mesh part 0 is using FIRST order LAGRANGE finite elements.


IIMethod: mesh part 1 is using FIRST order LAGRANGE finite elements.

IBHierarchyIntegrator::initializePatchHierarchy(): tag_buffer = 0
INSStaggeredHierarchyIntegrator::initializeCompositeHierarchyData():
  projecting the interpolated velocity field
INSStaggeredHierarchyIntegrator::regridProjection(): regrid projection solve number of iterations = 0
INSStaggeredHierarchyIntegrator::regridProjection(): regrid projection solve residual norm        = 0
Input database:
input_db {
   Re                             = 50                      // input used
   MU                             = 0.02                    // input used
   RHO                            = 1                       // input used
   L                              = 5                       // input used
   U_MAX                          = 1                       // input not used
   MAX_LEVELS                     = 1                       // input used
   REF_RATIO                      = 2                       // input used
   N                              = 8                       // input used
   NFINEST                        = 8                       // input used
   DX0                            = 0.625                   // input not used
   DX                             = 0.625                   // input used
   MFAC                           = 2                       // input used
   ELEM_TYPE                      = "EDGE2"                 // input used
   elem_order                     = "FIRST"                 // input not used
   LEFT_END                       = -2.5                    // input used
   RIGHT_END                      = 2.5                     // input used
   SEPARATION                     = 2.5                     // input used
   UPPER_DRIFT_VELOCITY           = 1                       // input used
   LOWER_DRIFT_VELOCITY           = -1                      // input used
   PK1_DEV_QUAD_ORDER             = "SEVENTH"               // input not used
   PK1_DIL_QUAD_ORDER             = "FIFTH"                 // input not used
   USE_BOUNDARY_MESH              = TRUE                    // input not used
   CREEPING_FLOW                  = FALSE                   // input used
   IB_DELTA_FUNCTION              = "IB_3"                  // input used
   SPLIT_FORCES                   = TRUE                    // input used
   USE_PRESSURE_JUMP_CONDITIONS   = TRUE                    // input used
   USE_VELOCITY_JUMP_CONDITIONS   = TRUE                    // input used
   WSS_CALC_WIDTH                 = 1.05                    // input used
   P_CALC_WIDTH                   = 1.3                     // input used
   USE_CONSISTENT_MASS_MATRIX     = TRUE                    // input used
   NORMALIZE_PRESSURE_JUMP        = FALSE                   // input used
   IB_POINT_DENSITY               = 4                       // input used
   START_TIME                     = 0                       // input used
   GROW_DT                        = 2                       // input used
   NUM_CYCLES                     = 1                       // input used
   CONVECTIVE_TS_TYPE             = "ADAMS_BASHFORTH"       // input used
   CONVECTIVE_OP_TYPE             = "STABILIZED_PPM"        // input used
   CONVECTIVE_FORM                = "ADVECTIVE"             // input used
   NORMALIZE_PRESSURE             = FALSE                   // input used
   CFL_MAX                        = 0.1                     // input used
   DT                             = 0.00625                 // input used
   END_TIME                       = 0.00625                 // input used
   ERROR_ON_DT_CHANGE             = TRUE                    // input used
   VORTICITY_TAGGING              = TRUE                    // input used
   TAG_BUFFER                     = 1                       // input used
   REGRID_CFL_INTERVAL            = 0.5                     // input used
   OUTPUT_U                       = TRUE                    // input used
   OUTPUT_P                       = TRUE                    // input used
   OUTPUT_F                       = TRUE                    // input used
   OUTPUT_OMEGA                   = TRUE                    // input used
   OUTPUT_DIV_U                   = TRUE                    // input used
   ENABLE_LOGGING                 = TRUE                    // input used
   KAPPA_S                        = 5.12                    // input used
   ETA_S                          = 0.1                     // input used
   USE_SECOND_VELOCITY_CORRECTION = FALSE                   // input used
   USE_CURR_MESH_CONFIG           = FALSE                   // input used
   U_INFLOW                       = "sqrt((X1)*(X1))  <= SEPARATION/2 ? LOWER_DRIFT_VELOCITY + (X1 + SEPARATION/2)*(UPPER_DRIFT_VELOCITY - LOWER_DRIFT_VELOCITY)/SEPARATION : ( (X1 < -SEPARATION/2) ? LOWER_DRIFT_VELOCITY : UPPER_DRIFT_VELOCITY )" // input used
   VelocityBcCoefs_0 {
      U_INFLOW             = "sqrt((X1)*(X1))  <= SEPARATION/2 ? LOWER_DRIFT_VELOCITY + (X1 + SEPARATION/2)*(UPPER_DRIFT_VELOCITY - LOWER_DRIFT_VELOCITY)/SEPARATION : ( (X1 < -SEPARATION/2) ? LOWER_DRIFT_VELOCITY : UPPER_DRIFT_VELOCITY )" // input used
      SEPARATION           = 2.5                            // input used
      LOWER_DRIFT_VELOCITY = -1                             // input used
      UPPER_DRIFT_VELOCITY = 1                              // input used
      acoef_function_0     = "1.0"                          // input used
      acoef_function_1     = "1.0"                          // input used
      acoef_function_2     = "0.0"                          // input used
      acoef_function_3     = "0.0"                          // input used
      bcoef_function_0     = "0.0"                          // input used
      bcoef_function_1     = "0.0"                          // input used
      bcoef_function_2     = "1.0"                          // input used
      bcoef_function_3     = "1.0"                          // input used
      gcoef_function_0     = "sqrt((X1)*(X1))  <= SEPARATION/2 ? LOWER_DRIFT_VELOCITY + (X1 + SEPARATION/2)*(UPPER_DRIFT_VELOCITY - LOWER_DRIFT_VELOCITY)/SEPARATION : ( (X1 < -SEPARATION/2) ? LOWER_DRIFT_VELOCITY : UPPER_DRIFT_VELOCITY )" // input used
      gcoef_function_1     = "sqrt((X1)*(X1))  <= SEPARATION/2 ? LOWER_DRIFT_VELOCITY + (X1 + SEPARATION/2)*(UPPER_DRIFT_VELOCITY - LOWER_DRIFT_VELOCITY)/SEPARATION : ( (X1 < -SEPARATION/2) ? LOWER_DRIFT_VELOCITY : UPPER_DRIFT_VELOCITY )" // input used
      gcoef_function_2     = "0.0"                          // input used
      gcoef_function_3     = "0.0"                          // input used
   }
   VelocityBcCoefs_1 {
      acoef_function_0 = "1.0"                              // input used
      acoef_function_1 = "1.0"                              // input used
      acoef_function_2 = "1.0"                              // input used
      acoef_function_3 = "1.0"                              // input used
      bcoef_function_0 = "0.0"                              // input used
      bcoef_function_1 = "0.0"                              // input used
      bcoef_function_2 = "0.0"                              // input used
      bcoef_function_3 = "0.0"                              // input used
      gcoef_function_0 = "0.0"                              // input used
      gcoef_function_1 = "0.0"                              // input used
      gcoef_function_2 = "0.0"                              // input used
      gcoef_function_3 = "0.0"                              // input used
   }
   VelocityInitialConditions {
      U_INFLOW             = "sqrt((X1)*(X1))  <= SEPARATION/2 ? LOWER_DRIFT_VELOCITY + (X1 + SEPARATION/2)*(UPPER_DRIFT_VELOCITY - LOWER_DRIFT_VELOCITY)/SEPARATION : ( (X1 < -SEPARATION/2) ? LOWER_DRIFT_VELOCITY : UPPER_DRIFT_VELOCITY )" // input used
      SEPARATION           = 2.5                            // input used
      LOWER_DRIFT_VELOCITY = -1                             // input used
      UPPER_DRIFT_VELOCITY = 1                              // input used
      function_0           = "sqrt((X1)*(X1))  <= SEPARATION/2 ? LOWER_DRIFT_VELOCITY + (X1 + SEPARATION/2)*(UPPER_DRIFT_VELOCITY - LOWER_DRIFT_VELOCITY)/SEPARATION : ( (X1 < -SEPARATION/2) ? LOWER_DRIFT_VELOCITY : UPPER_DRIFT_VELOCITY )" // input used
      function_1           = "0.0"                          // input used
   }
   IBHierarchyIntegrator {
      start_time          = 0                               // input used
      end_time            = 0.00625                         // input used
      grow_dt             = 2                               // input used
      num_cycles          = 1                               // input used
      regrid_cfl_interval = 0.5                             // input used
      dt_max              = 0.00625                         // input used
      error_on_dt_change  = TRUE                            // input used
      enable_logging      = TRUE                            // input used
   }
   IIMethod {
      IB_delta_fcn                   = "IB_3"               // input used
      split_forces                   = TRUE                 // input not used
      use_pressure_jump_conditions   = TRUE                 // input used
      use_velocity_jump_conditions   = TRUE                 // input used
      use_consistent_mass_matrix     = TRUE                 // input used
      IB_point_density               = 4                    // input used
      wss_calc_width                 = 1.05                 // input used
      p_calc_width                   = 1.3                  // input not used
      min_ghost_cell_width           = 6                    // input used
      normalize_pressure_jump        = FALSE                // input not used
      use_current_mesh_configuration = FALSE                // input used
      use_second_velocity_correction = FALSE                // input used
   }
   INSStaggeredHierarchyIntegrator {
      mu                            = 0.02                  // input used
      rho                           = 1                     // input used
      start_time                    = 0                     // input used
      end_time                      = 0.00625               // input used
      creeping_flow                 = FALSE                 // input used
      grow_dt                       = 2                     // input used
      convective_time_stepping_type = "ADAMS_BASHFORTH"     // input used
      convective_op_type            = "STABILIZED_PPM"      // input used
      convective_difference_form    = "ADVECTIVE"           // input used
      normalize_pressure            = FALSE                 // input used
      cfl                           = 0.1                   // input used
      dt_max                        = 0.00625               // input used
      using_vorticity_tagging       = TRUE                  // input used
      vorticity_rel_thresh          = 0.01                  // input used
      tag_buffer                    = 1                     // input used
      output_U                      = TRUE                  // input used
      output_P                      = TRUE                  // input used
      output_F                      = TRUE                  // input used
      output_Omega                  = TRUE                  // input used
      output_Div_U                  = TRUE                  // input used
      enable_logging                = TRUE                  // input used
      U_P_bdry_interp_type          = "LINEAR"              // from default
   }
   Main {
      log_file_name               = "II_2D_N_128_pbc_normjump.log" // input used
      log_all_nodes               = FALSE                   // input used
      viz_writer                  = "VisIt", "ExodusII"     // input used
      viz_dump_interval           = 1                       // input used
      viz_dump_dirname            = "viz_II_2D_N_128_pbc_normjump" // input used
      visit_number_procs_per_file = 1                       // input used
      restart_dump_interval       = 0                       // input used
      restart_dump_dirname        = "restart_IB2d"          // input used
      data_dump_interval          = 79                      // input used
      data_dump_dirname           = "hier_data_II2d_N_128_pbc_normjump" // input used
      timer_dump_interval         = 0                       // input used
   }
   CartesianGeometry {
      domain_boxes       = [(0,0),(7,7)]                    // input used
      x_lo               = -2.5, -2.5                       // input used
      x_up               = 2.5, 2.5                         // input used
      periodic_dimension = 0, 0                             // input used
   }
   GriddingAlgorithm {
      max_levels                = 1                         // input used
      efficiency_tolerance      = 0.85                      // input used
      combine_efficiency        = 0.85                      // input used
      check_nonrefined_tags     = 'w'                       // from default
      check_overlapping_patches = 'i'                       // from default
      extend_tags_to_bdry       = FALSE                     // from default
      ratio_to_coarser {
         level_1 = 2, 2                                     // input not used
         level_2 = 2, 2                                     // input not used
         level_3 = 2, 2                                     // input not used
         level_4 = 2, 2                                     // input not used
         level_5 = 2, 2                                     // input not used
      }
      largest_patch_size {
         level_0 = 8, 8                                     // input used
      }
      smallest_patch_size {
         level_0 = 8, 8                                     // input used
      }
   }
   StandardTagAndInitialize {
      tagging_method = "GRADIENT_DETECTOR"                  // input used
   }
   LoadBalancer {
      bin_pack_method                      = "SPATIAL"      // input used
      max_workload_factor                  = 1              // input used
      ignore_level_box_union_is_single_box = FALSE          // from default
   }
   TimerManager {
      print_exclusive      = FALSE                          // input used
      print_total          = TRUE                           // input used
      print_threshold      = 0.1                            // input used
      timer_list           = "IBAMR::*::*", "IBTK::*::*", "*::*::*" // input used
      print_processor      = TRUE                           // from default
      print_max            = FALSE                          // from default
      print_summed         = FALSE                          // from default
      print_user           = FALSE                          // from default
      print_sys            = FALSE                          // from default
      print_wall           = TRUE                           // from default
      print_percentage     = TRUE                           // from default
      print_concurrent     = FALSE                          // from default
      print_timer_overhead = FALSE                          // from default
   }
}


Writing visualization files...


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 0
Simulation time is 0
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0,0.00625], dt = 0.00625
IBHierarchyIntegrator::advanceHierarchy(): regridding prior to timestep 0
IBHierarchyIntegrator::regridHierarchy(): starting Lagrangian data movement
IBHierarchyIntegrator::regridHierarchy(): regridding the patch hierarchy
IBHierarchyIntegrator::regridHierarchy(): finishing Lagrangian data movement
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing convective operator
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing velocity subdomain solver
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing pressure subdomain solver
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing incompressible Stokes solver
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve number of iterations = 2
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 3.84218e-06
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve number of iterations = 0
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 0.000418295
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0100032
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.0100032
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 0
Simulation time is 0.00625
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing visualization files...

 Lagrangian WSS_L2_norm = -nan

 Lagrangian WSS_max_norm = 0

 Lagrangian U_L2_norm = 15.9325

 Lagrangian U_max_norm = 7.12534

 Lagrangian disp_L2_norm = 0.0995766

 Lagrangian disp_max_norm = 0.0445324

Lagrangian P_L2_norm = 0

Lagrangian P_max_norm = 0

 Lagrangian WSS_L2_norm = -nan

 Lagrangian WSS_max_norm = 0

 Lagrangian U_L2_norm = 15.9325

 Lagrangian U_max_norm = 7.12534

 Lagrangian disp_L2_norm = 0.0995766

 Lagrangian disp_max_norm = 0.0445324

Lagrangian P_L2_norm = 0

Lagrangian P_max_norm = 0


Writing state data...


+++++++++++++++++++++++++++++++++++++++++++++++++++
Computing error norms.

 p_Eulerian_L2_norm = nan
 p_Eulerian_max_norm = 0

 u_Eulerian_L2_norm = 4.05096

 u_Eulerian_max_norm = 1.00032

Error in the Eulerian u at time 0.006250000000000001:
  L2-norm:  0.001140777296777013
  max-norm: 0.0003473904487998336
+++++++++++++++++++++++++++++++++++++++++++++++++++
 MU = 0.02
  dx:  0.625
  dt: 0.006250000000000001
 Using the jump condition
